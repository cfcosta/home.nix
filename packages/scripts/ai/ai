#!/usr/bin/env python

import os
import sys
from pathlib import Path


def get_command_prefix() -> str:
    """Get command prefix from the script name."""
    return Path(sys.argv[0]).name + "-"


def find_executables() -> list[str]:
    """Find all executables with matching prefix in PATH."""
    prefix = get_command_prefix()
    prefix_len = len(prefix)
    commands = []
    paths = os.environ.get("PATH", "").split(os.pathsep)

    for path in paths:
        if not path:
            continue
        path_dir = Path(path)
        if not path_dir.exists():
            continue

        for item in path_dir.iterdir():
            if item.name.startswith(prefix) and os.access(item, os.X_OK):
                name = item.name[prefix_len:]

                if name not in commands:
                    commands.append(name)

    return sorted(commands)


def print_commands(commands: list[str]) -> None:
    """Print available commands."""
    print("Available commands:")
    for cmd in commands:
        print(f"  {cmd}")


def find_executable(command: str) -> Path | None:
    """Find the full path of a prefixed executable."""
    prefix = get_command_prefix()
    for path in os.environ.get("PATH", "").split(os.pathsep):
        if not path:
            continue
        candidate = Path(path) / f"{prefix}{command}"
        if candidate.exists() and os.access(candidate, os.X_OK):
            return candidate
    return None


def main() -> int:
    """Main entry point."""
    commands = find_executables()

    if len(sys.argv) < 2:
        print_commands(commands)
        return 1

    subcommand = sys.argv[1]

    if subcommand not in commands:
        print(f"Error: No command found for '{subcommand}'", file=sys.stderr)
        return 1

    executable = find_executable(subcommand)
    if not executable:
        print(f"Error: Could not find executable for '{subcommand}'", file=sys.stderr)
        return 127

    # Execute the command with remaining arguments
    os.execv(str(executable), [str(executable)] + sys.argv[2:])


if __name__ == "__main__":
    sys.exit(main())
